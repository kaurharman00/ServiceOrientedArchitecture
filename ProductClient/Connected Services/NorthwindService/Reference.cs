//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProductClient.NorthwindService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductData", Namespace="http://schemas.datacontract.org/2004/07/ProductService.Model")]
    [System.SerializableAttribute()]
    public partial class ProductData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QuantityPerUnitField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductName {
            get {
                return this.ProductNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductNameField, value) != true)) {
                    this.ProductNameField = value;
                    this.RaisePropertyChanged("ProductName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QuantityPerUnit {
            get {
                return this.QuantityPerUnitField;
            }
            set {
                if ((object.ReferenceEquals(this.QuantityPerUnitField, value) != true)) {
                    this.QuantityPerUnitField = value;
                    this.RaisePropertyChanged("QuantityPerUnit");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NorthwindService.INorthwindService")]
    public interface INorthwindService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INorthwindService/GetProducts", ReplyAction="http://tempuri.org/INorthwindService/GetProductsResponse")]
        string[] GetProducts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INorthwindService/GetProducts", ReplyAction="http://tempuri.org/INorthwindService/GetProductsResponse")]
        System.Threading.Tasks.Task<string[]> GetProductsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INorthwindService/GetProductData", ReplyAction="http://tempuri.org/INorthwindService/GetProductDataResponse")]
        ProductClient.NorthwindService.ProductData GetProductData(string pName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INorthwindService/GetProductData", ReplyAction="http://tempuri.org/INorthwindService/GetProductDataResponse")]
        System.Threading.Tasks.Task<ProductClient.NorthwindService.ProductData> GetProductDataAsync(string pName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INorthwindService/UpdateProducts", ReplyAction="http://tempuri.org/INorthwindService/UpdateProductsResponse")]
        void UpdateProducts(ProductClient.NorthwindService.ProductData pData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INorthwindService/UpdateProducts", ReplyAction="http://tempuri.org/INorthwindService/UpdateProductsResponse")]
        System.Threading.Tasks.Task UpdateProductsAsync(ProductClient.NorthwindService.ProductData pData);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INorthwindServiceChannel : ProductClient.NorthwindService.INorthwindService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NorthwindServiceClient : System.ServiceModel.ClientBase<ProductClient.NorthwindService.INorthwindService>, ProductClient.NorthwindService.INorthwindService {
        
        public NorthwindServiceClient() {
        }
        
        public NorthwindServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NorthwindServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NorthwindServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NorthwindServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetProducts() {
            return base.Channel.GetProducts();
        }
        
        public System.Threading.Tasks.Task<string[]> GetProductsAsync() {
            return base.Channel.GetProductsAsync();
        }
        
        public ProductClient.NorthwindService.ProductData GetProductData(string pName) {
            return base.Channel.GetProductData(pName);
        }
        
        public System.Threading.Tasks.Task<ProductClient.NorthwindService.ProductData> GetProductDataAsync(string pName) {
            return base.Channel.GetProductDataAsync(pName);
        }
        
        public void UpdateProducts(ProductClient.NorthwindService.ProductData pData) {
            base.Channel.UpdateProducts(pData);
        }
        
        public System.Threading.Tasks.Task UpdateProductsAsync(ProductClient.NorthwindService.ProductData pData) {
            return base.Channel.UpdateProductsAsync(pData);
        }
    }
}
